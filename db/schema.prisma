// ============================================================================
// Prisma Schema
// Learn more: https://pris.ly/d/prisma-schema
// ============================================================================

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int             @id @default(autoincrement())
  name           String?
  email          String          @unique
  hashedPassword String?
  role           UserRole        @default(USER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  tokens         Token[]
  sessions       Session[]
  projects       Project[]
  reviews        Review[]
  supportTickets SupportTicket[]
  user           UserProfile?
}

model UserProfile {
  id            Int       @id @default(autoincrement())
  dateOfBirth   DateTime?
  address       String?
  age           Int?
  city          String?
  state         String?
  phone         String?   @unique
  gender        Gender?
  country       String?
  postalCode    String?
  profilePic    String?
  walletBalance Float     @default(0)
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  userProfile   User? @relation(fields: [userProfileId], references: [id])
  userProfileId Int?  @unique
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model Project {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  title           String
  description     String
  projectImage    String
  projectImages   String[]
  slug            String     @unique
  fileUrl         String?
  videoUrl        String?
  featured        Boolean    @default(false)
  version         String     @default("1.0.0")
  features        String?
  requirements    String?
  price           Float      @default(0)
  isResellAllowed Boolean    @default(false)
  isApproved      Boolean    @default(false)
  views           Int        @default(0)
  downloads       Int        @default(0)
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  robots          String?    @default("index,follow") // Example: "noindex, nofollow", "index, follow"
  demoUrl         String?
  repositoryUrl   String?
  visibility      Visibility @default(PUBLIC)

  user   User @relation(fields: [userId], references: [id])
  userId Int

  Review           Review[]
  ProjectCategory  ProjectCategory[]
  ProjectTag       ProjectTag[]
  ProjectTechStack ProjectTechStack[]
  SupportTicket    SupportTicket[]
}

model Category {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  category        String            @unique
  ProjectCategory ProjectCategory[]
}

model ProjectCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId Int
  project   Project @relation(fields: [projectId], references: [id])

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([projectId, categoryId])
}

model Tags {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  tag        String       @unique
  ProjectTag ProjectTag[]
}

model ProjectTag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId Int
  project   Project @relation(fields: [projectId], references: [id])

  tagId Int
  tag   Tags @relation(fields: [tagId], references: [id])

  @@unique([projectId, tagId])
}

model TechStack {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  techstack        String             @unique
  ProjectTechStack ProjectTechStack[]
}

model ProjectTechStack {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId Int
  project   Project @relation(fields: [projectId], references: [id])

  techStackId Int
  techstack   TechStack @relation(fields: [techStackId], references: [id])

  @@unique([projectId, techStackId])
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int      @default(5) @db.SmallInt
  comment   String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
}

model SupportTicket {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  issueType   IssueType
  status      TicketStatus @default(OPEN)
  description String
  resolvedAt  DateTime?

  user   User @relation(fields: [userId], references: [id])
  userId Int

  project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Status {
  APPROVED
  NOTAPPROVED
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum LicenseType {
  ORIGINAL
  RESALE
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  ON_HOLD
  ESCALATED
  RESOLVED
  CLOSED
  REOPENED
}

enum IssueType {
  DISPUTE
  REFUND
  BUG
  QUERY
  FEATURE_REQUEST
  PAYMENT
  ACCOUNT
  PERFORMANCE
  SECURITY
  OTHER
}
